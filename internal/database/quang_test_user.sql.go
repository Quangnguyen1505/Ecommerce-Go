// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: quang_test_user.sql

package database

import (
	"context"
)

const createQuang = `-- name: CreateQuang :one
INSERT INTO quang_test_v1_goose (
  name, age, sex
) VALUES (
  $1, $2, $3
)
RETURNING id, name, age, sex, created_at
`

type CreateQuangParams struct {
	Name string
	Age  int32
	Sex  int32
}

func (q *Queries) CreateQuang(ctx context.Context, arg CreateQuangParams) (QuangTestV1Goose, error) {
	row := q.db.QueryRow(ctx, createQuang, arg.Name, arg.Age, arg.Sex)
	var i QuangTestV1Goose
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const getQuangByEmail = `-- name: GetQuangByEmail :one
SELECT id, name, age, sex, created_at FROM quang_test_v1_goose WHERE name = $1 LIMIT 1
`

func (q *Queries) GetQuangByEmail(ctx context.Context, name string) (QuangTestV1Goose, error) {
	row := q.db.QueryRow(ctx, getQuangByEmail, name)
	var i QuangTestV1Goose
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const updateQuang = `-- name: UpdateQuang :exec
UPDATE quang_test_v1_goose 
    set name = $2, 
    age = $3
WHERE id = $1
`

type UpdateQuangParams struct {
	ID   int64
	Name string
	Age  int32
}

func (q *Queries) UpdateQuang(ctx context.Context, arg UpdateQuangParams) error {
	_, err := q.db.Exec(ctx, updateQuang, arg.ID, arg.Name, arg.Age)
	return err
}
