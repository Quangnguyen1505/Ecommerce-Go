// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pre_go_crm_user_c.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_v1_goose (
  name, age, sex
) VALUES (
  $1, $2, $3
)
RETURNING id, name, age, sex, created_at
`

type CreateUserParams struct {
	Name string
	Age  int32
	Sex  int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserV1Goose, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Age, arg.Sex)
	var i UserV1Goose
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, age, sex, created_at FROM user_v1_goose WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, name string) (UserV1Goose, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, name)
	var i UserV1Goose
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user_v1_goose 
    set name = $2, 
    age = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int64
	Name string
	Age  int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name, arg.Age)
	return err
}
